From fd3606a447f2e88d6fdc450430a96ed55fbf9ab5 Mon Sep 17 00:00:00 2001
From: Sandeep Sheriker M <sandeep.sheriker@microchip.com>
Date: Fri, 21 Feb 2020 11:19:07 +0100
Subject: [PATCH 1/2] plplot: fix configure error for generating header files

Signed-off-by: Sandeep Sheriker M <sandeep.sheriker@microchip.com>
---
 include/CMakeLists.txt      | 27 --------------------
 lib/qsastime/CMakeLists.txt | 50 -------------------------------------
 src/CMakeLists.txt          |  1 -
 3 files changed, 78 deletions(-)

diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
index f8e6d3087..70796733e 100644
--- a/include/CMakeLists.txt
+++ b/include/CMakeLists.txt
@@ -38,33 +38,6 @@ set(plhershey-unicode-gen_SRCS
   ${CMAKE_SOURCE_DIR}/fonts/plhershey-unicode-gen.c
   )
 
-if(NOT CMAKE_CROSSCOMPILING)
-  add_executable(plhershey-unicode-gen ${plhershey-unicode-gen_SRCS})
-else(NOT CMAKE_CROSSCOMPILING)
-  SET(IMPORT_EXECUTABLES ${CMAKE_NATIVE_BINARY_DIR}/include/ImportExecutables.cmake)
-  INCLUDE(${IMPORT_EXECUTABLES})
-endif(NOT CMAKE_CROSSCOMPILING)
-
-add_custom_command(
-  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/plhershey-unicode.h
-  COMMAND plhershey-unicode-gen
-  ${CMAKE_SOURCE_DIR}/fonts/plhershey-unicode.csv
-  ${CMAKE_CURRENT_BINARY_DIR}/plhershey-unicode.h
-  DEPENDS
-  plhershey-unicode-gen
-  ${CMAKE_SOURCE_DIR}/fonts/plhershey-unicode.csv
-  )
-
-if(NOT CMAKE_CROSSCOMPILING)
-  export(TARGETS plhershey-unicode-gen FILE ${CMAKE_CURRENT_BINARY_DIR}/ImportExecutables.cmake )
-endif(NOT CMAKE_CROSSCOMPILING)
-
-# For cross-directory dependencies....
-add_custom_target(
-  plhershey-unicode.h_built
-  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/plhershey-unicode.h
-  )
-
 set(include_INSTALLED_HEADERS
   disptab.h
   drivers.h
diff --git a/lib/qsastime/CMakeLists.txt b/lib/qsastime/CMakeLists.txt
index f97062f0d..c8a2e366b 100644
--- a/lib/qsastime/CMakeLists.txt
+++ b/lib/qsastime/CMakeLists.txt
@@ -42,57 +42,11 @@ include_directories(
 # Routine for generating a header containing data to be used by the
 # TAI-UTC transformation code.
 
-if(NOT CMAKE_CROSSCOMPILING)
-  add_executable(tai-utc-gen ${CMAKE_CURRENT_SOURCE_DIR}/tai-utc-gen.c)
-  if(MATH_LIB)
-    target_link_libraries(tai-utc-gen ${MATH_LIB})
-  endif(MATH_LIB)
-  add_executable(deltaT-gen ${CMAKE_CURRENT_SOURCE_DIR}/deltaT-gen.c ${CMAKE_CURRENT_SOURCE_DIR}/dspline.c)
-  export(TARGETS tai-utc-gen FILE ${CMAKE_CURRENT_BINARY_DIR}/tai-utc-gen.cmake )
-  export(TARGETS deltaT-gen FILE ${CMAKE_CURRENT_BINARY_DIR}/deltaT-gen.cmake )
-else(NOT CMAKE_CROSSCOMPILING)
-  # Generated by initial non-cross build above.
-  include(${CMAKE_NATIVE_BINARY_DIR}/lib/qsastime/tai-utc-gen.cmake)
-  include(${CMAKE_NATIVE_BINARY_DIR}/lib/qsastime/deltaT-gen.cmake)
-endif(NOT CMAKE_CROSSCOMPILING)
-
-add_custom_command(
-  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/tai-utc.h
-  COMMAND tai-utc-gen
-  ${CMAKE_CURRENT_SOURCE_DIR}/tai-utc.dat
-  ${CMAKE_CURRENT_BINARY_DIR}/tai-utc.h
-  DEPENDS
-  ${CMAKE_CURRENT_SOURCE_DIR}/tai-utc.dat
-  tai-utc-gen
-  )
-
-add_custom_command(
-  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/deltaT.h
-  COMMAND deltaT-gen
-  ${CMAKE_CURRENT_SOURCE_DIR}/deltaT.dat
-  ${CMAKE_CURRENT_BINARY_DIR}/deltaT.h
-  DEPENDS
-  ${CMAKE_CURRENT_SOURCE_DIR}/deltaT.dat
-  deltaT-gen
-  )
-
-# These target-level dependencies needed below.
-add_custom_target(
-  tai-utc.h_built
-  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/tai-utc.h
-  )
-
-add_custom_target(
-  deltaT.h_built
-  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/deltaT.h
-  )
-
 set(qsastime_LIB_SRCS
   qsastime.c dsplint.c
   )
 
 configure_library_build(qsastime "" "${qsastime_LIB_SRCS}" "${MATH_LIB}" "")
-add_dependencies(${WRITEABLE_TARGET}qsastime tai-utc.h_built deltaT.h_built)
 
 set(qsastime_LIB_HDRS
   ${CMAKE_CURRENT_SOURCE_DIR}/qsastime.h
@@ -121,14 +75,12 @@ if(TEST_QSASTIME)
   # to make the private library API visible.
 
   add_executable(qsastime_test qsastime_test.c qsastime_extra.c qsastime.c)
-  add_dependencies(qsastime_test tai-utc.h_built)
   if(MATH_LIB)
     target_link_libraries(qsastime_test ${MATH_LIB})
   endif(MATH_LIB)
 
   # Routine for testing bhunt_search function in qsastime.c.
   add_executable(bhunt_search_test bhunt_search_test.c qsastime.c)
-  add_dependencies(bhunt_search_test tai-utc.h_built)
   if(MATH_LIB)
     target_link_libraries(bhunt_search_test ${MATH_LIB})
   endif(MATH_LIB)
@@ -138,7 +90,6 @@ if(TEST_QSASTIME)
   # Add in dsplint.c rather than use the library because don't want
   # to make the private library API visible.
   add_executable(deltaT_test deltaT_test.c dsplint.c)
-  add_dependencies(deltaT_test deltaT.h_built)
 
   # Routine for testing just the library functions against their library
   # inverses (to test self-consistency when such inverses exist) and also
@@ -154,7 +105,6 @@ if(TEST_QSASTIME)
 
   if(BUILD_QSASTIME_TESTLIB)
     add_executable(qsastime_testlib qsastime_testlib.c qsastime.c)
-    add_dependencies(qsastime_testlib tai-utc.h_built)
     if(MATH_LIB)
       target_link_libraries(qsastime_testlib ${MATH_LIB})
     endif(MATH_LIB)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 757b4edc8..c856203ed 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -294,7 +294,6 @@ if(NOT ENABLE_DYNDRIVERS AND ANY_QT_DEVICE AND PLPLOT_USE_QT5)
 endif(NOT ENABLE_DYNDRIVERS AND ANY_QT_DEVICE AND PLPLOT_USE_QT5)
 
 configure_library_build(plplot "" "${plplot_LIB_SRCS}" "${libplplot_LINK_LIBRARIES}" "${LIB_INSTALL_RPATH}")
-add_dependencies(${WRITEABLE_TARGET}plplot plhershey-unicode.h_built)
 
 if(NOT ENABLE_DYNDRIVERS AND (PLD_wxwidgets OR PLD_wxpng))
   set_property(TARGET ${WRITEABLE_TARGET}plplot
-- 
2.25.0

